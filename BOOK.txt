#include<iostream>
#include<string.h>

using namespace std;

struct node{
	string label;
	int ch_count;
	
	struct node* child[10];
	
}*root;

class GT{

	public:
		GT(){
			root = NULL;
		}
		
		string lbel;
		int count;
		
		void create(){
				root = new node;
				
				cout<<"Name of the book:\t";
				cin>>root->label;
				cout<<"Number of chapters:\t";
				cin>>root->ch_count;
				
				for(int i=0;i<root->ch_count;i++){
				
					root->child[i] = new node;
					cout<<"Name of chapter "<< i+1 <<":\t";
					cin>>root->child[i]->label;
					cout<<"Number of sections:\t";
					cin>>root->child[i]->ch_count;

					for(int j=0;j<root->child[i]->ch_count;j++){
						root->child[i]->child[j] = new node;
						cout<<"Name of section "<< i+1 <<" - "<< j+1<< ":\t";
						cin>>root->child[i]->child[j]->label;
						cout<<"Number of sub-sections:\t";
						cin>>root->child[i]->child[j]->ch_count;
						
						for(int k=0;k<root->child[i]->child[j]->ch_count;k++){
							root->child[i]->child[j]->child[k] = new node;
							cout<<"Name of sub-section "<< i+1 <<" - "<< j+1<< " - "<< k+1<< ":\t";
							cin>>root->child[i]->child[j]->label;

						}
					}
				}
		} 
		
		void display(node * r){
				cout<<endl<<"Name of book:\t";
				cout<<root->label<<endl;
				cout<<endl<<"Number of chapters:\t";
				cout<<root->ch_count<<endl;
			
				for(int i=0;i<root->ch_count;i++){
						cout<<endl<<"Name of chapter:\t";
						cout<<root->child[i]->label<<endl;
						cout<<endl<<"Number of sections:\t";
						cout<<root->child[i]->ch_count<<endl;

						for(int j=0;j<root->child[i]->ch_count;j++){
							cout<<"\t\t"<< i+1 <<" - "<< j+1<< " Name of sections: ";
							cout<<root->child[i]->child[j]->label<<endl;
							cout<<"\t\tNumber of sub-section: ";
							cout<<root->child[i]->child[j]->ch_count<<endl;
							
							for(int k=0;k<root->child[i]->child[j]->ch_count;k++){
								cout<<"\t\t\t"<< i+1 <<" - "<< j+1<< " - "<< k+1<< " Name of sub-section: ";
								cout<<root->child[i]->child[j]->label<<endl;
							}
						}
			}
		}
};


int main(){
	GT g;
	
	while(1){
		cout<<"--- MAIN MENU ---"<<endl;
		cout<<"1 -> Add book info"<<endl;
		cout<<"2 -> Display info"<<endl;
		cout<<"3 ->Exit"<<endl;
		cout<<"Choose an option (1-3):\t";
		int ch;
		cin>>ch;

		switch(ch){
			case 1:
				g.create();
				break;
			case 2:
				g.display(root);
				break;
			case 3:
			 	cout<<endl<<"// END OF CODE\n\n";
				exit(0);
				break;
			default:
				cout<<"Please choose a valid option (1-3).";
				break;
		}
	}
}




1. Start
🧱 2. Define a tree node structure
Each node contains:

label: name of the current unit (Book/Chapter/Section/Sub-section)

ch_count: number of children

child[10]: array to store pointers to children nodes

🎮 3. Main Program Loop
Display menu:

pgsql
Copy
Edit
1 → Add book info  
2 → Display info  
3 → Exit
🏗️ 4. Create Tree (Option 1)
Step-by-step process:
Create root node (book)

Input book name → store in root->label

Input number of chapters → store in root->ch_count

For each chapter:

Create a child node under root

Input chapter name → store in child[i]->label

Input number of sections → store in child[i]->ch_count

For each section:

Create a child node under chapter

Input section name → store in child[j]->label

Input number of sub-sections → store in child[j]->ch_count

For each sub-section:

Create a child node under section

Input sub-section name → store in child[k]->label

📢 5. Display Tree (Option 2)
Display book name and number of chapters

For each chapter:

Display chapter name and number of sections

For each section:

Display section name and number of sub-sections

For each sub-section:

Display sub-section name

🛑 6. Exit (Option 3)
Terminate the program

