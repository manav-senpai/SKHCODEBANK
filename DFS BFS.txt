#include <iostream>
using namespace std;

class DFS {
public:
    int top, f, r, x;
    int** adjList;
    int data[30], data1[30];
    int visit[20];
    int g[10][10];
    DFS() { top = -1; f = r = -1; adjList = nullptr; }
    int pop(); void push(int t); void enqueue(int t); int dequeue();
    void create(); void display(); void createList(); void displayList(); void dfs(); void bfs();
};

int DFS::pop() {
    if (top != -1) { int y = data[top]; top--; return y; }
    return -1;
}

void DFS::push(int t) { top++; data[top] = t; }

void DFS::enqueue(int t) {
    if (f == -1 && r == -1) { f++; r++; } else { r++; }
    data1[r] = t;
}

int DFS::dequeue() {
    if (f == -1 && r == -1) return -1;
    int y = data1[f];
    if (f == r) f = r = -1; else f++;
    return y;
}

void DFS::create() {
    cout << "Number of nodes:\t"; cin >> x;
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < x; j++) {
            cout << "\nEnter link status of graph from node " << i << " to node " << j << ": ";
            cin >> g[i][j];
        }
    }
}

void DFS::createList() {
    cout << "Number of nodes:\t"; cin >> x;
    adjList = new int*[x];
    for (int i = 0; i < x; ++i) { adjList[i] = new int[x](); }
    int connected, node;
    for (int i = 0; i < x; i++) {
        cout << "\nEnter number of nodes connected to node " << i << ": "; cin >> connected;
        cout << "\nEnter the nodes connected to node " << i << ": ";
        for (int j = 0; j < connected; j++) { cin >> node; adjList[i][node] = 1; }
    }
}

void DFS::displayList() {
    for (int i = 0; i < x; i++) {
        cout << "\nNode " << i << " is connected to: ";
        for (int j = 0; j < x; j++) {
            if (adjList[i][j] == 1) { cout << j << " "; }
        }
    }
    cout << "\n";
}

void DFS::display() {
    cout << " ";
    for (int i = 0; i < x; i++) { cout << " " << i; }
    cout << "\n";
    for (int i = 0; i < x; i++) {
        cout << i << " |";
        for (int j = 0; j < x; j++) { cout << " " << g[i][j]; }
        cout << "\n";
    }
}

void DFS::dfs() {
    for (int i = 0; i < x; i++) visit[i] = 0;
    DFS s;
    int v1;
    cout << "\nEnter starting node: "; cin >> v1;
    s.push(v1);
    cout << "DFS traversal is: ";
    while (s.top != -1) {
        int v = s.pop();
        if (visit[v] == 0) {
            cout << " " << v; visit[v] = 1;
            for (int i = x - 1; i >= 0; i--) {
                if (g[v][i] == 1 && visit[i] == 0) { s.push(i); }
            }
        }
    }
    cout << "\n";
}

void DFS::bfs() {
    for (int i = 0; i < x; i++) visit[i] = 0;
    DFS s;
    int v1;
    cout << "\nEnter starting node: "; cin >> v1;
    s.enqueue(v1);
    cout << "\nBFS traversal is: ";
    while (s.f != -1 && s.r != -1) {
        int v = s.dequeue();
        if (visit[v] == 0) {
            cout << " " << v; visit[v] = 1;
            for (int i = 0; i < x; i++) {
                if (adjList[v][i] == 1 && visit[i] == 0) { s.enqueue(i); }
            }
        }
    }
    cout << "\n";
}

int main() {
    DFS obj;
    bool flag = true;
    int choice;
    while (flag) {
        cout << "\n***YOUR CHOICES ARE****\n";
        cout << "\n1. Create Graph (Matrix) \n2. DFS Traversal (Using Matrix) \n3. Create Graph (List) \n4. BFS Traversal (Using List) \n5. Exit";
        cout << "\nEnter choice: "; cin >> choice;
        switch (choice) {
            case 1: obj.create(); obj.display(); break;
            case 2: obj.dfs(); break;
            case 3: obj.createList(); obj.displayList(); break;
            case 4: obj.bfs(); break;
            case 5: flag = false; break;
            default: cout << "\nEnter Valid Choice!"; break;
        }
    }
    return 0;
}


1. Data Structures Initialization
Maintain:

g[10][10]: adjacency matrix

adjList[x][x]: adjacency list (as a 2D array of pointers)

visit[]: to mark visited nodes

data[]: stack for DFS

data1[]: queue for BFS

Variables: top, f, r, x (nodes)

🌐 A. ADJACENCY MATRIX (Used in DFS)
🛠️ 2. create() — Build Graph using Matrix
Input: Number of nodes
Process:
Loop through all pairs (i, j):

Ask if node i is connected to node j

Set g[i][j] = 1 if connected, else 0

🖨️ 3. display() — Show Adjacency Matrix
Print the matrix in grid format.

🔍 4. dfs() — Depth First Search Traversal
Input: Starting node
Process:

Mark all nodes as unvisited.

Push starting node onto stack.

While stack is not empty:

Pop a node v

If not visited:

Mark as visited and print it

Push all unvisited adjacent nodes of v (in reverse order)

🔁 STACK METHODS FOR DFS
push(t): Add element to top

pop(): Remove top element and return it

🔀 B. ADJACENCY LIST (Used in BFS)
🛠️ 5. createList() — Build Graph using List
Input: Number of nodes
Process:

For each node i:

Ask how many nodes it's connected to

Input each connection and set adjList[i][j] = 1

🖨️ 6. displayList() — Show Adjacency List
Print each node and its connected nodes.

🔍 7. bfs() — Breadth First Search Traversal
Input: Starting node
Process:

Mark all nodes as unvisited.

Enqueue the starting node.

While queue is not empty:

Dequeue node v

If not visited:

Mark as visited and print it

Enqueue all unvisited adjacent nodes of v

🔁 QUEUE METHODS FOR BFS
enqueue(t): Add element at rear

dequeue(): Remove and return front element

🧠 8. Main Menu Workflow
User chooses:

mathematica
Copy
Edit
1 → Create Matrix Graph
2 → DFS using Matrix
3 → Create List Graph
4 → BFS using List
5 → Exit
Calls appropriate method based on choice.
