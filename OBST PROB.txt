#include<iostream>
using namespace std;
int find(int, int);
void print(int, int);
int c[20][20], w[20][20], r[20][20], p[20], q[20], k, m, i, j, n;
char idtr[10][7];
int main() {
    cout<<"\nEnter number of identifiers: ";
    cin>>n;
    for(i = 1; i <= n; i++) {
        cout<<"Enter Identifier "<<i<<": ";
        cin>>idtr[i];
    }
    for(i = 1; i <= n; i++) {
        cout<<"Enter successful probability of "<<i<<": ";
        cin>>p[i];
    }
    for(i = 0; i <= n; i++) {
        cout<<"Enter unsuccessful probability of "<<i<<": ";
        cin>>q[i];
    }
    for(i = 0; i <= n; i++) {
        w[i][i] = q[i];
        c[i][i] = r[i][i] = 0;
        cout<<"\nW: "<<w[i][i]<<" | c: "<<c[i][i]<<" | r: "<<r[i][i];
    }
    for(i = 0; i < n; i++) {
        j = i + 1;
        w[i][j] = p[j] + q[j] + q[i];
        c[i][j] = w[i][j];
        r[i][j] = j;
        cout<<"\nW: "<<w[i][j]<<" | c: "<<c[i][j]<<" | r: "<<r[i][j];
    }
    for(m = 2; m <= n; m++) {
        for(i = 0; i <= n-m; i++) {
            j = i + m;
            w[i][j] = p[j] + q[j] + w[i][j-1];
            c[i][j] = 1000;
            for(k = i + 1; k <= j; k++) {
                int cost = c[i][k-1] + c[k][j];
                if(cost < c[i][j]) {
                    c[i][j] = cost;
                    r[i][j] = k;
                }
            }
            c[i][j] += w[i][j];
            cout<<"\nW: "<<w[i][j]<<" | c: "<<c[i][j]<<" | r: "<<r[i][j];
        }
    }
    cout<<"\nFinal OBST is: ";
    print(0, n);
    return 0;
}
void print(int i, int j) {
    if(i < j) 
        cout<<"\n"<<idtr[r[i][j]];
    else
        return;
    print(i, r[i][j] - 1);
    print(r[i][j], j);
}


 INPUT
Read number of identifiers n.

For each identifier i = 1 to n:

Input the identifier name idtr[i].

Input:

p[1] to p[n] â†’ Successful search probabilities for each identifier.

q[0] to q[n] â†’ Unsuccessful search probabilities between and outside identifiers.

ðŸ”§ INITIALIZATION
For i = 0 to n:

w[i][i] = q[i] â†’ Weight of an empty tree.

c[i][i] = 0 â†’ Cost of an empty subtree.

r[i][i] = 0 â†’ No root in an empty tree.

For i = 0 to n - 1:

j = i + 1

w[i][j] = p[j] + q[j] + q[i] â†’ Total weight of 1-key tree.

c[i][j] = w[i][j] â†’ Cost is same as weight for single node.

r[i][j] = j â†’ Only key becomes the root.

ðŸ§® OBST DYNAMIC PROGRAMMING LOGIC
For sub-tree lengths m = 2 to n:

For i = 0 to n - m:

j = i + m

w[i][j] = w[i][j-1] + p[j] + q[j] â†’ Add current key and dummy weight

Initialize c[i][j] = âˆž

Try all roots k = i+1 to j:

Calculate temporary cost: cost = c[i][k-1] + c[k][j]

If cost < c[i][j], update:

c[i][j] = cost

r[i][j] = k

Finally, add the weight: c[i][j] += w[i][j]

ðŸŒ³ TREE CONSTRUCTION
Use a recursive function print(i, j) to output the OBST using the root matrix r[i][j]:

Print the root idtr[r[i][j]]

Recurse to left: print(i, r[i][j] - 1)

Recurse to right: print(r[i][j], j)

ðŸ“¦ OUTPUT
OBST keys (printed recursively in root-left-right style)

All intermediate weights, costs, and roots can also be shown (debug-style output in your code).


